#!/usr/local/bin/spn

/* Complex number demo for Sparkling
 * Also happens to demonstrate how to create and use classes
 *
 * Created by H2CO3 on 30/12/2013
 */


// Constructor for complex numbers
let Cplx = (function (self) {
	var class = {};

	let Cplx = function(self) {
		self["super"] = class;
		return self;
	};

	class["cfmt"] = function cfmt(self) {
		return "(%.3f %+.3fi)".format(self.re, self.im);
	};

	class["pfmt"] = function pfmt(self) {
		let r = self.r;
		let theta = self.theta;
		return "%.3f * (cos %.3f + i sin %.3f)".format(r, theta, theta);
	};

	class["add"] = function (self, z) {
		return Cplx(cplx_add(self, z));
	};

	class["sub"] = function (self, z) {
		return Cplx(cplx_sub(self, z));
	};

	class["mul"] = function (self, z) {
		return Cplx(cplx_mul(self, z));
	};

	class["div"] = function (self, z) {
		return Cplx(cplx_div(self, z));
	};

	class["conj"] = function (self) {
		return Cplx(cplx_conj(self));
	};

	class["toCartesian"] = function (self) {
		return Cplx(pol2can(self));
	};

	class["toPolar"] = function (self) {
		return Cplx(can2pol(self));
	};

	return Cplx;
}());

var z1 = Cplx({ "re": 1, "im": -1 });
var z2 = Cplx({ "re": 2, "im":  3 });
var z3 = Cplx({ "r": 2, "theta": M_PI / 3 });

printf("%s + %s = %s\n", z1.cfmt(), z2.cfmt(), z1.add(z2).cfmt());
printf("%s - %s = %s\n", z1.cfmt(), z2.cfmt(), z1.sub(z2).cfmt());
printf("%s * %s = %s\n", z1.cfmt(), z2.cfmt(), z1.mul(z2).cfmt());
printf("%s / %s = %s\n", z1.cfmt(), z2.cfmt(), z1.div(z2).cfmt());

printf("conj %s = %s\n", z1.cfmt(), z1.conj().cfmt());

printf("%s in trigonometric form: %s\n", z2.cfmt(), z2.toPolar().pfmt());
printf("%s in canonical form: %s\n", z3.pfmt(), z3.toCartesian().cfmt());
