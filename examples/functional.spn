#!/usr/bin/env spn

# demonstrating the functional capabilities of Sparkling using
# higher-order functions, closures, partial application, etc.

let flip = function (f) {
	return function () {
		return f.call(argv.reverse());
	};
};

let lessThan = function (a, b) {
	return a < b;
};

let greaterThan = flip(lessThan);
let a = 13, b = 37;

stdout.printf("%d < %d -> %B\n", a, b, lessThan(a, b));
stdout.printf("%d > %d -> %B\n", a, b, greaterThan(a, b));

# takes a function 'f' and returns a new function which calls 'f'
# with the rest of the arguments of 'curry()' and its own arguments.
# (again, assuming that no nil parameters will be passed to 'f'.)
let curry = function (f) {
	let rest = argv.slice(1, argv.length - 1);
	return function () {
		return f.call(rest.concat(argv));
	};
};

let adder = function () {
	return argv.reduce(0, function(a, b) { return a + b; });
};

let addsix = curry(adder, 1, 2, 3);

print("(1 + 2 + 3) + (4 + 5 + 6 + 7) = ", addsix(4, 5, 6, 7));

# The Maybe monad
# 'Maybe' is the 'return()' or 'unit()' function itself
# (just a constructor)

function Maybe(val) {
	return {
		// 'lift()' is more convenient than 'bind()'
		"lift": function (self, f) {
			return self.bind(function (arg) {
				return Maybe(f(arg));
			});
		},
		"bind": function (self, f) {
			if self["value"] == nil {
				return self;
			}

			return f(self["value"]);
		},
		"value": val
	};
}

# Some sample data: my family tree... or something like that.
# 'Maybe' is the classic example of looking up stuff in an
# associative container, since it's possible that a key
# simply does not exist in which case we get 'nil'.
let me = {
	"name": "Arpad",
	"age": 20,
	"mom": {
		"name": "N...",
		"mom": {
			"name": "I...",
			"age": 75
		},
		"dad": {
			"name": "K..."
		},
		"siblings": []
	},
	"dad": {
		"name": "F...",
		"age": 37,
		"mom": {
			"name": "H..."
		},
		"dad": {
			"name": "K...",
			"age": 56
		},
		"siblings": [
			{
				"name": "K...",
				"age": 29
			}
		]
	},
	"siblings": [
		{
			"name": "J...",
			"age": 7
		}
	]
};

let Me = Maybe(me);

# Find my grandma's age
let grandmaAge = Me.lift(function (person) {
	return person["mom"];
}).lift(function (person) {
	return person["mom"];
}).lift(function (person) {
	return person["age"];
});

# Find the age of my mom's cousin.
# But there's no such person in the tree...!
let momsCousinAge = Me.lift(function (person) {
	return person["mom"];
}).lift(function (person) {
	return person["cousin"];
}).lift(function (person) {
	return person["age"];
});

print("Grandma's age: ", grandmaAge["value"]);
print("Mom's cousin's age: ", momsCousinAge["value"]);

